<?php

use Drupal\node\NodeTypeInterface;

/**
 * Implements hook_theme().
 */
function wienimal_editor_toolbar_theme($existing, $type, $theme, $path)
{
    return [
        'wienimal_editor_toolbar' => [
            'variables' => [
                'attributes' => [],
                'links' => [],
            ],
        ],
    ];
}

/**
 * Implements hook_page_top().
 * @param array $page_top
 */
function wienimal_editor_toolbar_page_top(array &$page_top)
{
    Drupal::service('wienimal_editor_toolbar.menu_builder')->buildPageTop($page_top);
}

/**
 * Implements hook_preprocess().
 */
function wienimal_editor_toolbar_preprocess_menu__admin(&$variables, $hook)
{
    $variables['attributes']['class'][] = 'nav';
}

/**
 * Implements hook_preprocess().
 */
function wienimal_editor_toolbar_template_preprocess_default_variables_alter(&$variables)
{
    /** @var \Drupal\wienimal_editor_toolbar\Service\EditorToolbar $service */
    $service = Drupal::service('wienimal_editor_toolbar');
    $config = Drupal::config('wienimal_editor_toolbar.settings');

    // Load logo
    if ($config->get('show_logo') && $logo = $service->getLogo()) {
        $variables['logo'] = $logo;
    }

    // Load version variables
    if ($config->get('show_version_info') && $versionInfo = $service->getVersionInfo()) {
        $variables['version'] = $versionInfo['version'];
        $variables['versionDate'] = $versionInfo['date'];
    }

    // Load user variables
    if ($variables['logged_in']) {
        /** @var \Drupal\Core\Session\UserSession $user */
        $user = $variables['user']->getAccount();
        $variables['username'] = $user->getDisplayName();
    }
}

/**
 * Implements hook_theme_registry_alter().
 */
function wienimal_editor_toolbar_theme_registry_alter(&$theme_registry)
{
    $theme_registry['menu__admin']['path'] = drupal_get_path('module', 'wienimal_editor_toolbar') . '/templates';
}

/**
 * Remove wmsingles from derived add/overview menu links
 *
 * @param array $links
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
 *
 * @see \Drupal\wienimal_editor_toolbar\Plugin\Derivative\ContentMenuItem
 */
function wmcustom_menu_links_discovered_alter(array &$links)
{
    if (!\Drupal::moduleHandler()->moduleExists('wmsingles')) {
        return;
    }

    $storage = \Drupal::entityTypeManager()->getStorage('node_type');

    foreach ($links as $name => $link) {
        if ($link['provider'] !== 'wienimal_editor_toolbar') {
            continue;
        }

        $parents = [
            'wienimal_editor_toolbar.content_add' => 'node_type',
            'wienimal_editor_toolbar.content_overview' => 'type',
        ];

        foreach ($parents as $parent => $paramName) {
            if (
                $link['parent'] === $parent
                && isset($link['route_parameters'][$paramName])
                && ($nodeType = $storage->load($link['route_parameters'][$paramName]))
                && $nodeType instanceof NodeTypeInterface
                && $nodeType->getThirdPartySetting('wmsingles', 'isSingle')
            ) {
                unset($links[$name]);
                continue;
            }
        }
    }
}

function wienimal_editor_toolbar_locale_translation_projects_alter(&$projects)
{
    $path = drupal_get_path('module', 'wienimal_editor_toolbar') . '/translations/%language.po';
    $projects['wienimal_editor_toolbar']['info']['interface translation server pattern'] = $path;
}

/**
 * Apply a user function to every item of a menu tree
 * @param $value
 * @param $key
 * @param $callback
 */
function menu_walk_recursive_handler(&$value, $key, $callback)
{
    if (is_array($value)) {
        array_walk($value, 'menu_walk_recursive_handler', $callback);
    } else {
        $callback($value);

        if (!empty($value->subtree)) {
            array_walk($value->subtree, 'menu_walk_recursive_handler', $callback);
        }
    }
}

/**
 * Callback function for menu_walk_recursive_handler
 * @param array $tree
 * @param $callback
 */
function menu_walk_recursive(array $tree, $callback)
{
    array_walk($tree,'menu_walk_recursive_handler', $callback);
}
